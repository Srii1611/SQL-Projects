-- Retrieve the total number of orders placed.
SELECT 
    COUNT(order_id) AS total_Orders
FROM
    orders;

-- Calculate the total revenue generated from pizza sales.
SELECT 
    ROUND(SUM(order_details.quantity * pizzas.price),
            2) AS Total_sales
FROM
    order_details
        JOIN
    pizzas ON order_details.pizza_id = pizzas.pizza_id;


-- Identify the highest-priced pizza.
SELECT 
    pizza_types.name, pizzas.price
FROM
    pizza_types
        JOIN
    pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id
ORDER BY pizzas.price DESC
LIMIT 1;

-- Identify the most common pizza size ordered.
SELECT 
    pizzas.size, COUNT(order_details.quantity) AS order_count
FROM
    pizzas
        JOIN
    order_details ON pizzas.pizza_id = order_details.pizza_id
GROUP BY (pizzas.size)
ORDER BY order_count DESC
LIMIT 1;

-- List the top 5 most ordered pizza types along with their quantities.
SELECT 
    pizza_types.name, SUM(order_details.quantity) as orderd_quantity
FROM
    pizza_types
        JOIN
    pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id
        JOIN
    order_details ON order_details.pizza_id = pizzas.pizza_id group by pizza_types.name order by orderd_quantity desc limit 5;

-- Join the necessary tables to find the total quantity of each pizza category ordered.
SELECT 
    pizza_types.category,
    SUM(order_details.quantity) AS Quantity
FROM
    pizza_types
        JOIN
    pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id
        JOIN
    order_details ON order_details.pizza_id = pizzas.pizza_id
GROUP BY pizza_types.category
ORDER BY Quantity DESC;

-- Determine the distribution of orders by hour of the day
SELECT 
    HOUR(time) AS order_time, COUNT(order_id) AS order_Count
FROM
    orders
GROUP BY HOUR(time)
ORDER BY Order_time ASC;

-- Join relevant tables to find the category-wise distribution of pizzas.
SELECT 
    pizza_types.category AS Category_name,
    COUNT(pizza_types.category) AS category_count
FROM
    pizza_types
GROUP BY pizza_types.category;

-- Group the orders by date and calculate the average number of pizzas ordered per day.
SELECT 
    round(avg(ordered_quantity),0) as Avg_orders_perday
FROM
    (SELECT 
        orders.date, SUM(order_details.quantity) AS ordered_quantity
    FROM
        orders
    JOIN order_details ON orders.order_id = order_details.order_id
    GROUP BY Orders.date) as order_quantity;

-- Determine the top 3 most ordered pizza types based on revenue
SELECT 
    pizza_types.name,
    SUM(order_details.quantity * pizzas.price) AS Revenue
FROM
    pizza_types
        JOIN
    pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id
        JOIN
    order_details ON pizzas.pizza_id = order_details.pizza_id
GROUP BY pizza_types.name
ORDER BY Revenue DESC
LIMIT 3;

-- Calculate the percentage contribution of each pizza type to total revenue.
SELECT 
    pizza_types.category,
    ROUND(SUM(order_details.quantity * pizzas.price) / (SELECT 
                    ROUND(SUM(order_details.quantity * pizzas.price),
                                2) AS Total_sales FROM order_details
				JOIN pizzas ON order_details.pizza_id = pizzas.pizza_id) * 100,2) AS Revenue
FROM
    pizza_types JOIN pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id
                JOIN order_details ON pizzas.pizza_id = order_details.pizza_id
GROUP BY pizza_types.category
ORDER BY Revenue DESC
LIMIT 3;

-- Determine the top 3 most ordered pizza types based on revenue for each pizza category.
select category, name, revenue, 
rank() over(partition by category order by revenue desc) as rn
from
(SELECT 
    pizza_types.name,
    pizza_types.category,
    SUM(order_details.quantity * pizzas.price) as Revenue
FROM pizza_types JOIN pizzas ON pizzas.pizza_type_id = pizza_types.pizza_type_id
				 JOIN order_details ON order_details.pizza_id = pizzas.pizza_id
	GROUP BY pizza_types.name,
    pizza_types.category) as a limit 3;
